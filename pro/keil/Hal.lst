C51 COMPILER V9.00   HAL                                                                   10/09/2016 22:20:35 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HAL
OBJECT MODULE PLACED IN .\Hal.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\hal\Hal.c LARGE BROWSE INCDIR(..\..\sys;..\..\app;..\..\hal) DEBUG OB
                    -JECTEXTEND PRINT(.\Hal.lst) OBJECT(.\Hal.obj)

line level    source

   1          #include "stc89c5xrc.h"
   2          #include "Hal.h"
   3          
   4          #define HAL_PULSE_INFO_NUM 2
   5          
   6          static HAL_IDATA HalPulseInfo_t g_pulseConfig[HAL_PULSE_INFO_NUM];
   7          static HAL_IDATA uint8_t g_pulseCount[2];
   8          static HAL_IDATA uint32_t g_timerCount = 0;
   9          static HAL_IDATA MotorStepOver_cb g_pluseStepOverCb = NULL;
  10          
  11          void HalGpioPinValueSet(uint8_t io, uint8_t val)
  12          {
  13   1          uint8_t port = (io & 0xf0) >> 4;
  14   1          uint8_t pin = io & 0x0f;
  15   1          uint8_t temp;
  16   1      
  17   1          switch(port)
  18   1          {
  19   2          case 0:
  20   2              temp = P0;
  21   2              if(val)
  22   2              {
  23   3                  temp |= 0x1 << pin;
  24   3              }
  25   2              else
  26   2              {
  27   3                  temp &= ~(0x1 << pin);
  28   3              }
  29   2              P0 = temp;
  30   2              break;
  31   2          case 1:
  32   2              temp = P1;
  33   2              if(val)
  34   2              {
  35   3                  temp |= 0x1 << pin;
  36   3              }
  37   2              else
  38   2              {
  39   3                  temp &= ~(0x1 << pin);
  40   3              }
  41   2              P1 = temp;
  42   2              break;
  43   2          case 2:
  44   2              temp = P2;
  45   2              if(val)
  46   2              {
  47   3                  temp |= 0x1 << pin;
  48   3              }
  49   2              else
  50   2              {
  51   3                  temp &= ~(0x1 << pin);
  52   3              }
  53   2              P2 = temp;
  54   2              break;
C51 COMPILER V9.00   HAL                                                                   10/09/2016 22:20:35 PAGE 2   

  55   2          case 3:
  56   2              temp = P3;
  57   2              if(val)
  58   2              {
  59   3                  temp |= 0x1 << pin;
  60   3              }
  61   2              else
  62   2              {
  63   3                  temp &= ~(0x1 << pin);
  64   3              }
  65   2              P3 = temp;
  66   2              break;
  67   2          case 4:
  68   2              temp = P4;
  69   2              if(val)
  70   2              {
  71   3                  temp |= 0x1 << pin;
  72   3              }
  73   2              else
  74   2              {
  75   3                  temp &= ~(0x1 << pin);
  76   3              }
  77   2              P4 = temp;
  78   2              break;
  79   2          default:
  80   2              break;
  81   2          }
  82   1      }
  83          
  84          uint8_t HalGpioPinValueGet(uint8_t io)
  85          {
  86   1          uint8_t val;
  87   1          uint8_t port = (io & 0xf0) >> 4;
  88   1          uint8_t pin = io & 0x0f;
  89   1      
  90   1          switch(port)
  91   1          {
  92   2          case 0:
  93   2              val = P0 & (0x1 << pin);
  94   2              break;
  95   2          case 1:
  96   2              val = P1 & (0x1 << pin);
  97   2              break;
  98   2          case 2:
  99   2              val = P2 & (0x1 << pin);
 100   2              break;
 101   2          case 3:
 102   2              val = P3 & (0x1 << pin);
 103   2              break;
 104   2          case 4:
 105   2              val = P4 & (0x1 << pin);
 106   2              break;
 107   2          default:
 108   2              break;
 109   2          }
 110   1          return val;
 111   1      }
 112          
 113          static void timerModeConfig(uint8_t timer0, uint8_t timer1)
 114          {
 115   1          uint8_t config = ((timer1 << 4) & 0xf0) + (timer0 & 0x0f);
 116   1          TMOD = config;
C51 COMPILER V9.00   HAL                                                                   10/09/2016 22:20:35 PAGE 3   

 117   1      }
 118          
 119          static void sysTimerInit(void)
 120          {
 121   1          TH0  = 0xfc;
 122   1          TL0  = 0x66;        //1ms
 123   1          TR0 = 1;
 124   1          ET0 = 1;
 125   1      }
 126          
 127          void Time0_Int() interrupt 1
 128          {
 129   1          TH0 = 0xfc;
 130   1          TL0 = 0x66;
 131   1          g_timerCount++;
 132   1      }
 133          
 134          void HalIRQEnableSet(bool enable)
 135          {
 136   1          EA = enable;
 137   1      }
 138          
 139          uint32_t HalSysTime(void)
 140          {
 141   1          return g_timerCount;
 142   1      }
 143          
 144          int8_t HalPulseInfoInit(uint8_t index, HalPulseInfo_t *info)
 145          {
 146   1          if(index >= HAL_PULSE_INFO_NUM)
 147   1          {
 148   2              return -1;
 149   2          }
 150   1          g_pulseConfig[index] = *info;
 151   1          HalGpioPinValueSet(info->enablePin, HAL_MOTOR_DISABLE_LEVEL);
 152   1          return 0;
 153   1      }
 154          
 155          HalPulseInfo_t *HalPulseInfoGet(uint8_t index)
 156          {
 157   1          return &g_pulseConfig[index];
 158   1      }
 159          
 160          int8_t HalPulseInfoSet(uint8_t index, MotorDirection_t dir, uint16_t count, bool enable)
 161          {
 162   1          if(index >= HAL_PULSE_INFO_NUM)
 163   1          {
 164   2              return -1;
 165   2          }
 166   1          g_pulseConfig[index].enable = enable;
 167   1          g_pulseConfig[index].val = HAL_MOTOR_CLK_DISABLE_LEVEL; //disable
 168   1          g_pulseConfig[index].count = count;
 169   1          g_pulseConfig[index].curNum = 0;
 170   1          g_pulseConfig[index].dir = dir;
 171   1          g_pulseConfig[index].needShift = true;
 172   1          g_pulseConfig[index].shiftCount = 0;
 173   1          //  g_pulseConfig[index].cb = cb;
 174   1          if(enable)
 175   1          {
 176   2              if(dir == MOTOR_DIR_FORWARD)
 177   2              {
 178   3                  HalGpioPinValueSet(g_pulseConfig[index].dirPin, HAL_MOTOR_FORWARD_LEVEL); //forward
C51 COMPILER V9.00   HAL                                                                   10/09/2016 22:20:35 PAGE 4   

 179   3              }
 180   2              else
 181   2              {
 182   3                  HalGpioPinValueSet(g_pulseConfig[index].dirPin, HAL_MOTOR_BACKWARD_LEVEL); //backward
 183   3              }
 184   2              if(g_pulseConfig[index].enablePin != HAL_GPIO_INVALID)
 185   2              {
 186   3                  HalGpioPinValueSet(g_pulseConfig[index].enablePin, HAL_MOTOR_ENABLE_LEVEL);
 187   3              }
 188   2          }
 189   1          else
 190   1          {
 191   2              if(g_pulseConfig[index].enablePin != HAL_GPIO_INVALID)
 192   2              {
 193   3                  HalGpioPinValueSet(g_pulseConfig[index].enablePin, HAL_MOTOR_DISABLE_LEVEL);
 194   3              }
 195   2          }
 196   1          return 0;
 197   1      }
 198          
 199          /*
 200                  period: x ms
 201          */
 202          
 203          void HalPulseStart(uint32_t period, MotorStepOver_cb cb)
 204          {
 205   1          float count = 11059200 / 12 / (period * 1000);
 206   1          uint16_t timeCount = (uint16_t)count;
 207   1      //    uint16_t timeCount = 400;
 208   1      
 209   1          g_pluseStepOverCb = cb;
 210   1      
 211   1          g_pulseCount[1] = (0xffff - timeCount) / 0xff;
 212   1          g_pulseCount[0] = (0xffff - timeCount) % 0xff;
 213   1          TH1  = g_pulseCount[1];
 214   1          TL1  = g_pulseCount[0];
 215   1          TR1 = 1; //enable timer 1
 216   1          ET1 = 1; //irq enable
 217   1      }
 218          
 219          void HalPulseStop(void)
 220          {
 221   1          ET1 = 0;
 222   1          TR1 = 0;
 223   1      }
 224          
 225          #define HAL_MOTOR_VALID_LEVEL 0x0
 226          
 227          static uint8_t getShiftVal(uint8_t i)
 228          {
 229   1          if(g_pulseConfig[i].curNum < ( g_pulseConfig[i].count / 10) || \
 230   1              g_pulseConfig[i].curNum > (g_pulseConfig[i].count * 90 / 100))
 231   1          {
 232   2              return 10;
 233   2          }
 234   1          return 0;
 235   1      }
 236          
 237          void Time1_Int() interrupt 3
 238          {
 239   1          uint8_t i;
 240   1          for(i = 0; i < HAL_PULSE_INFO_NUM; i++)
C51 COMPILER V9.00   HAL                                                                   10/09/2016 22:20:35 PAGE 5   

 241   1          {
 242   2              if(g_pulseConfig[i].enable)
 243   2              {
 244   3                  if(g_pulseConfig[i].count != 0 && g_pulseConfig[i].curNum >= g_pulseConfig[i].count)
 245   3                  {
 246   4                      if(g_pluseStepOverCb != NULL)
 247   4                      {
 248   5                          g_pluseStepOverCb(i);
 249   5                      }
 250   4                  }
 251   3                  else
 252   3                  {
 253   4                      if(g_pulseConfig[i].needShift)
 254   4                      {
 255   5                          if(g_pulseConfig[i].shiftCount >= getShiftVal(i))
 256   5                          {
 257   6                              g_pulseConfig[i].shiftCount = 0;
 258   6                              HalGpioPinValueSet(g_pulseConfig[i].ctrlPin, g_pulseConfig[i].val);
 259   6                              if(HAL_MOTOR_VALID_LEVEL == g_pulseConfig[i].val)
 260   6                              {
 261   7                                  g_pulseConfig[i].curNum++;
 262   7                              }
 263   6                              g_pulseConfig[i].val = !g_pulseConfig[i].val;
 264   6                          }
 265   5                          else
 266   5                          {
 267   6                              g_pulseConfig[i].shiftCount++;
 268   6                          }
 269   5                      }
 270   4                      else
 271   4                      {
 272   5                          HalGpioPinValueSet(g_pulseConfig[i].ctrlPin, g_pulseConfig[i].val);
 273   5                          if(HAL_MOTOR_VALID_LEVEL == g_pulseConfig[i].val)
 274   5                          {
 275   6                              g_pulseConfig[i].curNum++;
 276   6                          }
 277   5                          g_pulseConfig[i].val = !g_pulseConfig[i].val;
 278   5                      }
 279   4                  }
 280   3              }
 281   2          }
 282   1          TH1  = g_pulseCount[1];
 283   1          TL1  = g_pulseCount[0];
 284   1      }
 285          
 286          uint8_t HalGetDevAddr(void)
 287          {
 288   1      #if HAL_USE_HARDWARE_ADDR
                  uint8_t addr = 0;
                  addr |= HalGpioPinValueGet(HAL_ADDR2_PIN) << 2;
                  addr |= HalGpioPinValueGet(HAL_ADDR1_PIN) << 1;
                  addr |= HalGpioPinValueGet(HAL_ADDR0_PIN);
                  return addr;
              #else
 295   1          return HAL_SOFTWARE_ADDR;
 296   1      #endif
 297   1      }
 298          
 299          static HAL_IDATA HalUartRecv_cb g_uartRecvCb = NULL;
 300          
 301          /*
 302          * serial init function, baudrate 9600bps
C51 COMPILER V9.00   HAL                                                                   10/09/2016 22:20:35 PAGE 6   

 303          * @param[in] serial receive callback func.
 304          */
 305          void HalUartInit(HalUartRecv_cb cb)
 306          {
 307   1          g_uartRecvCb = cb;
 308   1          HalIRQEnableSet(false);
 309   1          SCON = 0x50;
 310   1          T2CON = 0x34;
 311   1          RCAP2H = 0xff;
 312   1          RCAP2L = 0xdb;
 313   1          TH2 = RCAP2H;
 314   1          TL2 = RCAP2L;
 315   1          ES = 1;
 316   1          HalIRQEnableSet(true);
 317   1      }
 318          
 319          void HalUartSend(const uint8_t *dat, uint8_t len)
 320          {
 321   1          uint8_t i;
 322   1      
 323   1          for(i = 0; i < len; i++)
 324   1          {
 325   2              TI = 0;
 326   2              SBUF = dat[i];
 327   2              while(TI == 0);
 328   2              TI = 0;
 329   2          }
 330   1      }
 331          
 332          void uartIrq() interrupt 4
 333          {
 334   1          if(RI)
 335   1          {
 336   2              if(g_uartRecvCb != NULL)
 337   2              {
 338   3                  g_uartRecvCb(SBUF);
 339   3              }
 340   2              RI = 0;
 341   2          }
 342   1      }
 343          
 344          void HalInit(void)
 345          {
 346   1          timerModeConfig(1, 1);
 347   1          sysTimerInit();
 348   1          HalIRQEnableSet(true);
 349   1      }
 350          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1369    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
