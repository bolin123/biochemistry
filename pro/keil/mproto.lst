C51 COMPILER V9.00   MPROTO                                                                10/09/2016 22:17:11 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MPROTO
OBJECT MODULE PLACED IN .\mproto.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\app\mproto.c LARGE BROWSE INCDIR(..\..\sys;..\..\app;..\..\hal) DEBUG
                    - OBJECTEXTEND PRINT(.\mproto.lst) OBJECT(.\mproto.obj)

line level    source

   1          #include <stdio.h>
   2          #include <string.h>
   3          #include "mproto.h"
   4          #include "Sys.h"
   5          
   6          #define MPROTO_FRAME_BUFFER_LEN 64
   7          #define MPROTO_FRAME_PREAMBLE  0xbc
   8          #define MPROTO_DEFAULT_HOST_ADDR 0xfe
   9          
  10          static HAL_XDATA bool g_frameRecved = false;
  11          static HAL_IDATA uint8_t g_frameBuffer[MPROTO_FRAME_BUFFER_LEN] = {0};
  12          static HAL_IDATA uint8_t g_frameDataCount = 0;
  13          static HAL_XDATA uint8_t g_msgIndex = 0;
  14          static HAL_XDATA uint32_t       g_broadcastTime = 0;
  15          static HAL_XDATA bool g_broadcastFlag = false;
  16          static HAL_XDATA SysEvent_cb g_sysEventCb = NULL;
  17          static HAL_XDATA uint8_t g_controlIndex = 0;
  18          static HAL_XDATA MProtoStepInfo_t g_steps;
  19          
  20          static uint8_t checkFrame(const uint8_t *dat, uint8_t len)
  21          {
  22   1          uint8_t count = 0;
  23   1          uint8_t i;
  24   1      
  25   1          for(i = 0; i < len; i++)
  26   1          {
  27   2              count += dat[i];
  28   2          }
  29   1          return count;
  30   1      }
  31          
  32          void MprotoSend(uint8_t cmd, const uint8_t *dat, uint8_t len, uint8_t sn, bool needAck)
  33          {
  34   1          uint8_t buffer[MPROTO_FRAME_BUFFER_LEN];
  35   1          MProtoHead_t *proto = (MProtoHead_t *)buffer;
  36   1      
  37   1          proto->preamble = MPROTO_FRAME_PREAMBLE;
  38   1          proto->addr = MPROTO_DEFAULT_HOST_ADDR;
  39   1          proto->dataLen = len;
  40   1          proto->sn = sn;
  41   1          proto->cmd = cmd;
  42   1          if(needAck)
  43   1          {
  44   2              proto->cmd |= 0x80;
  45   2          }
  46   1          memcpy(&buffer[sizeof(MProtoHead_t)], dat, len);
  47   1          buffer[sizeof(MProtoHead_t) + len] = checkFrame(buffer, sizeof(MProtoHead_t) + len);
  48   1      
  49   1          HalUartSend(buffer, sizeof(MProtoHead_t) + len + 1);
  50   1      }
  51          
  52          void MProtoCtrlResult(MProtoResult_t result)
  53          {
  54   1          uint8_t dat[2];
C51 COMPILER V9.00   MPROTO                                                                10/09/2016 22:17:11 PAGE 2   

  55   1          dat[0] = g_controlIndex;
  56   1          dat[1] = result;
  57   1          MprotoSend(MPROTO_CMD_MOTOR_CTRL, dat, 2, g_msgIndex++, 0);
  58   1      }
  59          
  60          static void controlOpt(uint8_t *contents)
  61          {
  62   1          uint8_t i = 0, j, n;
  63   1          uint8_t *steps = NULL;
  64   1          uint8_t type, replay;
  65   1      
  66   1          g_controlIndex = contents[i++];
  67   1          g_steps.count = contents[i++];
  68   1          type = contents[i++];
  69   1          replay = contents[i++];
  70   1          steps = &contents[i];
  71   1          if(g_steps.count <= MPROTO_MAX_STEPS_COUNT)
  72   1          {
  73   2              for(n = 0, j = 0; n < g_steps.count; n++)
  74   2              {
  75   3              #if 0
                          g_steps.step[n].id = steps[j++];
                          g_steps.step[n].dir = steps[j++];
                          g_steps.step[n].flag = steps[j++];
                          g_steps.step[n].cycle[0] = steps[j++];
                          g_steps.step[n].cycle[1] = steps[j++];
                          //g_steps.step[n].count = (g_steps.step[n].count << 8) + steps[j++];
                      #endif
  83   3                  memcpy(&g_steps.step[n], &steps[j], sizeof(MProtoStep_t));
  84   3                  j += sizeof(MProtoStep_t);
  85   3              }
  86   2              g_sysEventCb(SYS_EVENT_MOTOR_CONTRL, (void *)&g_steps);
  87   2          }
  88   1          else
  89   1          {
  90   2              MProtoCtrlResult(MPROTO_RESULT_CMD_VALID);
  91   2          }
  92   1      
  93   1      }
  94          
  95          static void mprotoRecv(uint8_t byte)
  96          {
  97   1          static uint8_t frameDataLen = 0;
  98   1      
  99   1          if(g_frameDataCount >= MPROTO_FRAME_BUFFER_LEN)
 100   1          {
 101   2              g_frameDataCount = 0;
 102   2          }
 103   1          g_frameBuffer[g_frameDataCount++] = byte;
 104   1      
 105   1          switch(g_frameDataCount)
 106   1          {
 107   2          case 1:
 108   2              if(byte != MPROTO_FRAME_PREAMBLE)
 109   2              {
 110   3                  g_frameDataCount = 0;
 111   3              }
 112   2              break;
 113   2          case 2:
 114   2              if(byte != SysGetDevAddr() && byte != 0xff)
 115   2              {
 116   3                  g_frameDataCount = 0;
C51 COMPILER V9.00   MPROTO                                                                10/09/2016 22:17:11 PAGE 3   

 117   3              }
 118   2              break;
 119   2          case 3:
 120   2              if(byte > (MPROTO_FRAME_BUFFER_LEN - sizeof(MProtoHead_t)))
 121   2              {
 122   3                  g_frameDataCount = 0;
 123   3              }
 124   2              else
 125   2              {
 126   3                  frameDataLen = byte;
 127   3              }
 128   2              break;
 129   2          default:
 130   2              if(g_frameDataCount == (sizeof(MProtoHead_t) + frameDataLen + 1))
 131   2              {
 132   3                  if(byte == checkFrame(g_frameBuffer, sizeof(MProtoHead_t) + frameDataLen))
 133   3                  {
 134   4                      g_frameRecved = true;
 135   4                  }
 136   3                  g_frameDataCount = 0;
 137   3              }
 138   2              break;
 139   2          }
 140   1      }
 141          
 142          static void mprotoPrase(void)
 143          {
 144   1          MProtoHead_t *mproto;
 145   1          uint8_t cmd;
 146   1          uint8_t *content = NULL;
 147   1      
 148   1          if(g_frameRecved)
 149   1          {
 150   2              mproto = (MProtoHead_t *)g_frameBuffer;
 151   2      
 152   2              if(mproto->cmd & 0x80) //need ack
 153   2              {
 154   3                  MprotoSend(MPROTO_CMD_ACK, NULL, 0, mproto->sn, false);
 155   3              }
 156   2              cmd = mproto->cmd & 0x7f;
 157   2              switch(cmd)
 158   2              {
 159   3              case MPROTO_CMD_BROADCAST:
 160   3                  g_broadcastTime = SysTime();
 161   3                  g_broadcastFlag = true;
 162   3                  break;
 163   3              case MPROTO_CMD_SELF_CHECK:
 164   3                  g_sysEventCb(SYS_EVENT_SELFCHECK, NULL);
 165   3                  break;
 166   3              case MPROTO_CMD_MOTOR_CTRL:
 167   3                  content = (uint8_t *)mproto + sizeof(MProtoHead_t);
 168   3                  if(SysGetStatus() == SYS_STATUS_IDLE)
 169   3                  {
 170   4                      controlOpt(content);
 171   4                  }
 172   3                  else
 173   3                  {
 174   4                      MProtoCtrlResult(MPROTO_RESULT_BUSY);
 175   4                  }
 176   3                  break;
 177   3              case MPROTO_CMD_QUERY:
 178   3                  break;
C51 COMPILER V9.00   MPROTO                                                                10/09/2016 22:17:11 PAGE 4   

 179   3              default:
 180   3                  break;
 181   3              }
 182   2              g_frameRecved = false;
 183   2          }
 184   1      }
 185          
 186          static void broadcastAck(void)
 187          {
 188   1          uint8_t addr;
 189   1          if(g_broadcastFlag && SysHasPassTime(g_broadcastTime, SysGetDevAddr() * 1000))
 190   1          {
 191   2              addr = SysGetDevAddr();
 192   2              MprotoSend(MPROTO_CMD_BROADCAST, &addr, 1, g_msgIndex++, false);
 193   2              g_broadcastFlag = false;
 194   2          }
 195   1      }
 196          
 197          void MProtoInit(SysEvent_cb cb)
 198          {
 199   1          g_sysEventCb = cb;
 200   1          HalUartInit(mprotoRecv);
 201   1      }
 202          
 203          void MProtoPoll(void)
 204          {
 205   1          mprotoPrase();
 206   1          broadcastAck();
 207   1      }
 208          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    933    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     51      94
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
